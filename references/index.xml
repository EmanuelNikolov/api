<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on IGDB.com API Documentation</title>
    <link>https://igdb.github.com/api/references/</link>
    <description>Recent content in Reference on IGDB.com API Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jan 2017 10:23:01 +0100</lastBuildDate>
    
	<atom:link href="https://igdb.github.com/api/references/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CORS for JS &amp; Ionic</title>
      <link>https://igdb.github.com/api/references/cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/cors/</guid>
      <description>Cross-Origin Resource Sharing Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to let a user agent gain permission to access selected resources from a server on a different origin (domain) than the site currently in use. These security restrictions only affect browser-based javascript and mobile javascript frameworks like Ionic.
Enabling CORS is only available in premium tiers. For free users you can set up a proxy server, Ionic also has a guide for this.</description>
    </item>
    
    <item>
      <title>Expander</title>
      <link>https://igdb.github.com/api/references/expander/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/expander/</guid>
      <description>Expander What? The expander feature is used to combine multiple requests. For example, a game provides a list of company IDs which in turn need to be requested to reach the company data. Using the expander parameter, the company ID will instead be an object containing that data.
Where? The expander can be used on any entity that has sub-properties such as Games, Companies, People etc.
How? Example: /games/1838,828,1337?fields=name,themes.name,game.name&amp;amp;expand=game,themes</description>
    </item>
    
    <item>
      <title>Fields</title>
      <link>https://igdb.github.com/api/references/fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/fields/</guid>
      <description>What? Fields are properties of an entity. For example, a Game field would be rating or release_dates. Some fields have properties of their own, for example, the esrb field has the property synopsis.
Where? Fields can be used on any entity that has sub-properties such as Games, Companies, People etc.
How? Fields are requested in a comma separated list. For example, to get some information for some Games, Genres, Themes or anything else, you could request it like this:</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>https://igdb.github.com/api/references/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/filters/</guid>
      <description>What? Filters are used to sift through results to get what you want. You can exclude and include results based on their properties. For example you could remove all Games where the rating was below 80 (filter[rating][gte]=80).
How? Filters are parameter arrays so must be added using special keys like this: /games/?search=zelda&amp;amp;filter[rating][gte]=80&amp;amp;filter[release_dates.date][gt]=YYYY-MM-DD The filter itself comprises of 2 parts; The field and the postfix. Fields are described in the section on the left, postfixes are described below.</description>
    </item>
    
    <item>
      <title>Images</title>
      <link>https://igdb.github.com/api/references/images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/images/</guid>
      <description>Examples /games/1942?fields=screenshots
Here we retrieve the image properties of the game with the id &amp;ldquo;1942&amp;rdquo;
Response:
[ { &amp;quot;id&amp;quot;: 1942, &amp;quot;screenshots&amp;quot;: [ { &amp;quot;url&amp;quot;: &amp;quot;//images.igdb.com/igdb/image/upload/t_thumb/z5t0yuhyiiui1ickwhgj.png&amp;quot;, &amp;quot;cloudinary_id&amp;quot;: &amp;quot;z5t0yuhyiiui1ickwhgj&amp;quot;, &amp;quot;width&amp;quot;: 1920, &amp;quot;height&amp;quot;: 1080 }, { &amp;quot;url&amp;quot;: &amp;quot;//images.igdb.com/igdb/image/upload/t_thumb/mnljdjtrh44x4snmierh.png&amp;quot;, &amp;quot;cloudinary_id&amp;quot;: &amp;quot;mnljdjtrh44x4snmierh&amp;quot;, &amp;quot;width&amp;quot;: 1920, &amp;quot;height&amp;quot;: 1080 } ] } ]  Image url structure:
https://images.igdb.com/igdb/image/upload/t_screenshot_med_2x/dfgkfivjrhcksyymh9vw.jpg
Break down:
https://images.igdb.com/igdb/image/upload/t_{size}/{hash}.jpg
size is one of the interchangeable size types listed below. hash is the id of the image.</description>
    </item>
    
    <item>
      <title>Ordering</title>
      <link>https://igdb.github.com/api/references/ordering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/ordering/</guid>
      <description>What? Ordering (Sorting) is used to order results by a specific field.
How? You can order results like this: /games/?search=zelda&amp;amp;filter[rating][gte]=80&amp;amp;order=release_dates.date:desc. Notice the appended :desc which could also be :asc if required.
You can also subfilter arrays by appending &amp;ldquo;max&amp;rdquo;, &amp;ldquo;min&amp;rdquo;, &amp;ldquo;sum&amp;rdquo;, &amp;ldquo;avg&amp;rdquo; or &amp;ldquo;median&amp;rdquo;. For example, you can order games based on it&amp;rsquo;s earliest release date like this: /games/?search=zelda&amp;amp;order=release_dates.date:desc:min&amp;amp;limit=5
Order by popularity Popularity parameter for games. You can access it like this: /games/?</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://igdb.github.com/api/references/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/pagination/</guid>
      <description>Simple Pagination Here is an example for how to use limit. The default limit is 10. The maximum limit is 50. /platforms/?limit=33
There is also an offset. This will start the list at position 22 and give 33 results. /platforms/?limit=33&amp;amp;offset=22
For ever tier, offset has a maximum value of 10,000 for server-resource reasons. While simple pagination is perfect for smaller datasets, we strongly recommend using the Scroll API documented below for everything else.</description>
    </item>
    
    <item>
      <title>Response Codes</title>
      <link>https://igdb.github.com/api/references/response-codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/response-codes/</guid>
      <description>200: OK! Good response!  This result may still contain an empty array which indicates there are no results for your query.  400: Bad request  Something is wrong with the query parameters.  401: Unauthorized!  You may not have a key, sign up at api.igdb.com. You may be sending the key via a GET parameter which is incorrect, please use the &amp;ldquo;user-key&amp;rdquo; header. Your account may not have access to this specific endpoint.</description>
    </item>
    
    <item>
      <title>Tag Numbers</title>
      <link>https://igdb.github.com/api/references/tag-numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/tag-numbers/</guid>
      <description>Tag numbers are automatically generated numbers which provide a compact and fast way to do complex filtering on the IGDB API. The number calculation can be easily achieved with any programming language.
The basis of the calculation is a 32bit integer, where the first 4 bits contain the object type ID, and the remaining 28 bits represent the ID of the object we are generating the tag number for.
Using this method a flat index of custom object &amp;lsquo;hashes&amp;rsquo; can be maintained in which index the search and filtering is faster than using conventional methods.</description>
    </item>
    
    <item>
      <title>Webhooks</title>
      <link>https://igdb.github.com/api/references/webhooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igdb.github.com/api/references/webhooks/</guid>
      <description>What? Webhooks allow us to push data to you when it is added or updated. Instead of polling the API for changes, you can listen on your HTTP endpoint (Webhook) and we will deliver the data to you.
Webhooks are only available on Pro, Ultra and Enterprise plans.
 How to register your webhook Make a POST request to /webhooks via the IGDB API and include the following as the BODY of the request or as url encoded form parameters&amp;hellip;</description>
    </item>
    
  </channel>
</rss>